# coding: utf-8
#!/usr/bin/env python3

from miscellaneous.utilities import filter_ws
from miscellaneous.hash_functions import get_random_string


top20 = [
('c', 'none', 0),('d', 'none', -1),('d', 'none', -2),('d', 'none', -3),('i', '0', -1),('i', '1', 0),('i', 'a', -1),('i', 'q', -1),('i', '0', 0),('d', 'none', 1),('i', 'a', 0),('i', '5', 0),('i', '123', 0),('d', 'none', 2),('i', '2', 0),('i', '7', 0),('i', 'z', -1),('i', '9', 0),('d', 'none', 3),('i', '00', -1),('i', '6', 0),('i', '3', 0),('i', '8', 0),('i', '11', 0),('i', '4', 0),
('i', 'w', -1),('i', 'b', 0),('i', 'q', 0),('i', '00', 0),('i', '99', 0),('i', '12', 0),('i', 's', 0),('i', '98', 0),('i', '1', -1),('i', 's', -1),('i', '78', 0),('i', 'l', -1),('i', 'p', 0),('i', '89', 0),('i', '000', 0),('i', '90', 0),('i', 'z', 0),('i', '10', 0),('i', '23', 0),('i', '01', 0),('i', 'm', 0),('i', 'r', 0),('i', 'x', -1),('i', '000', -1),('i', 'k', 0),('i', 'e', 0),('i', '22', 0),('i', 'f', 0),('i', 'n', 0),('i', '88', 0),('i', 'w', 0),('i', '19', -1),('i', 'c', -1),('i', '13', 0),('i', 'm', -1),('i', 'p', -1),('i', '456', 0),('i', '21', 0),('i', 'y', -1),('i', '777', 0),('i', 'd', 0),('i', 'b', -1),('i', '10', -1),('s', '0', 'o'),('i', '08', 0),('i', '07', 0),('i', 'g', -1),('i', '007', 0),('i', 'd', -1),('i', 'y', 0),('i', 'h', -1),('i', '77', 0),('i', 't', 0),
('i', 'k', -1),('i', '55', 0),('i', 'f', -1),('i', '09', 0),('i', 'c', 0),('i', 'A', 0),('i', '56', 0),('i', 'j', 0),('i', 'v', 0),('i', '45', 0),('i', '67', 0),('i', 'i', 0),('s', 'o', '0'),('i', '001', 0),('i', 'A', -1),('i', 't', -1),('i', '101', 0),('i', 'l', 0),('i', '01', -1),('i', '92', 0),('i', 'r', -1),('i', 'g', 0),('i', '02', 0),('i', 'n', -1),('i', '91', 0),('i', 'o', 0),('i', '3', -1),('i', 'h', 0),('i', '321', 0),('i', '95', 0),('i', '123', -1),('i', '33', 0),('i', 'x', 0),('i', '85', 0),('i', '17', 0),('i', '06', 0),('i', '66', 0),('i', 'j', -1),('i', '19', 0),('i', '05', 0),('i', '03', 0),('i', '666', 0),('i', '24', 0),('i', '69', 0),('i', 'u', 0),('i', '16', 0),('i', '80', 0),('i', 'Q', 0),('i', '87', 0),('i', '79', 0),('i', '86', 0),('i', '93', 0),('i', '96', 0),('i', 'e', -1),('i', '65', 0),('i', '15', 0),('i', '25', 0),('i', '7', -1),('i', '44', 0),('i', '4', -1),('i', '97', 0),('i', '05', -1),('i', '09', -1),('i', '8', -1),('i', '2', -1),('i', '83', 0),('i', '57', 0),('i', '50', 0),('i', '94', 0),('i', '54', 0),('i', '11', -1),('i', '08', -1),('i', '61', 0),('i', '20', 0),('i', '14', 0),('i', 'v', -1),('i', '81', 0),('i', '74', 0),('i', '5', -1),('i', '76', 0),('i', '34', 0),('i', '18', 0),('i', '82', 0),('i', '41', 0),('i', '04', 0),('i', 'K', 0),('i', '06', -1),('i', 'S', 0),('i', 'V', 0),('i', '007', -1),('i', '75', 0),('i', '02', -1),('i', '9', -1), ('i', '28', 0),('i', '53', 0),('s', 'asdf', '1234'),('s', '1234', 'asdf'),('i', 'N', 0),('i', '84', 0),('i', '20', -1),('i', '27', 0),('i', 'Q', -1),('i', '13', -1),('i', 'D', 0),('i', 'J', 0),
('i', '26', 0),('i', '52', 0),('i', '29', 0),('i', '30', 0),('i', '49', 0),('i', '58', 0),('i', '07', -1),('i', '38', 0),('i', 'Z', -1),('i', '31', 0),('i', 'o', -1),('i', '72', 0),('i', '63', 0),('i', '420', 0),('s', '3', 'e'),('i', 'P', 0),('i', '04', -1),('i', '32', 0),('i', '85', -1),('i', 'R', 0),('i', '47', 0),('i', '16', -1),('i', 'i', -1),('i', '71', 0),('i', '51', 0),('i', '12', -1),('i', '22', -1),('i', '87', -1),('i', 'man', 0),('i', '73', 0),('i', '46', 0),('i', '35', 0),('i', 'L', 0),('i', '59', 0),('i', '98', -1),('i', '68', 0),('i', '32', -1),('i', '60', 0),('i', 'K', -1),('i', '42', 0),('i', '27', -1),('i', '36', 0),('i', 'H', -1),('i', '64', 0),('i', 'G', 0),('s', 'e', '3'),('i', '101', -1),('i', 'u', -1),('i', 'Z', 0),('i', 'B', 0),('i', '39', 0),('i', 'boy', 0),('i', 'P', -1),('i', 'E', 0),('i', '79', -1),('i', '28', -1),('i', 'O', 0),('i', '30', -1),('i', 'L', -1),('i', '69', -1),('i', 'D', -1),('i', '31', -1),('i', '52', -1),('i', '456', -1),
('s', 'qwer', '1234'),('s', '5678', 'qwer'),('i', '70', -1),('s', 'qwer', '5678'),('i', '41', -1),('i', 'S', -1),('i', 'F', 0),('i', 'C', 0),('i', '15', -1),('s', 'qwe', 'qaz'),('s', 'qaz', 'qwe'),('i', '18', -1),('i', '36', -1),('i', '66', -1),('i', '53', -1),('i', 'W', -1),('i', '89', -1),('i', '48', 0),('i', 'I', -1),('i', '17', -1),('i', '40', 0),('i', 'O', -1),('i', '82', -1),('i', '77', -1),('i', 'X', 0),('i', '94', -1),('i', '45', -1),('i', '51', -1),('i', '50', -1),('i', 'ita', 0),('i', 'W', 0),('i', '65', -1),('i', '14', -1),('i', '93', -1),('i', '21', -1),('s', '1234', 'qwer'),
('i', 'R', -1),('i', 'T', -1),('i', '25', -1),('i', '143', -1),('s', '5678', '1234'),('i', '60', -1),('i', 'V', -1),('i', 'man', -1),('i', '38', -1),('i', '86', -1),('i', '46', -1),('i', '92', -1),('i', 'G', -1),('i', '54', -1),('i', 'M', 0),('i', '70', 0),('i', '089', 0),('i', '68', -1),('i', '62', 0),('i', '78', -1),('i', 'Y', 0),('i', '62', -1),('i', '40', -1),('i', 'C', -1),('i', 'H', 0),('i', 'B', -1),('i', 'X', -1),('i', '26', -1),('i', 'T', 0),('s', 'wsx', '2wsx'),('s', '2wsx', 'wsx'),  ('i', '37', 0),('i', '03', -1),('i', 'J', -1),('i', '55', -1),('i', '49', -1),('i', '34', -1),('s', 'zxcv', 'asdf'),('s', 'asdf', 'zxcv'),('i', 'N', -1)]


def apply_rule(word,r):
    if len(word) == 0:
        return ""
        
    tw = word
    #capitalize or lower the first character
    if r[0] == 'c':
        tw = word.capitalize()
        if word == tw:
            if word[0].isalpha():
                tw = word[:1].lower() + word[1:]
    # delete characters
    if r[0] == 'd':
        if r[2]<0:
            tw = word[:r[2]]
        else:
            tw = word[r[2]:]
    # substiitute substrings
    if r[0] == 's':
        if r[1] in word:
            tw = word.replace(r[1], r[2])
    # insert characters
    if r[0] == 'i':
        if r[2] == 0:
            tw = word+(r[1])
        else:
            tw = r[1]+(word)
    return tw

def get_das_R_rules(word,K, BL=[]):
    tweaks = set()
    MAX_TWEAKS = K
    for elem in top20:
        if len(tweaks) == MAX_TWEAKS:
            break
        tw = apply_rule(word,elem)
        if tw != word and tw not in BL and filter_ws(tw) :
            tweaks.add(tw)
    #pdb.set_trace()
    #assert len(list(tweaks)) == MAX_TWEAKS, f'Can not generate {MAX_TWEAKS}; generated {len(list(tweaks))}'
    while len(list(tweaks)) < MAX_TWEAKS:
        tweaks.add(get_random_string(6))
    return(list(tweaks))